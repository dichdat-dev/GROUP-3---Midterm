# -*- coding: utf-8 -*-
"""Inventory forecast

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyEatUxCzZCWbUMjyxu6gDzgSgnxMbmh
"""

from google.colab import drive
drive.mount('/content/drive')



# Dự đoán mức tồn kho bằng mô hình LSTM

# Bước 1: Thiết lập môi trường
# Cài đặt các thư viện để xử lý dữ liệu, xây dựng mô hình và trực quan hóa
!pip install pandas numpy matplotlib seaborn tensorflow scikit-learn

# Nhập các thư viện cần thiết
import pandas as pd  # Xử lý dữ liệu dạng bảng
import numpy as np  # Tính toán số học và mảng
import matplotlib.pyplot as plt  # Vẽ biểu đồ
import seaborn as sns  # Tạo biểu đồ trực quan
from sklearn.preprocessing import MinMaxScaler  # Chuẩn hóa dữ liệu về [0, 1]
from sklearn.metrics import mean_absolute_error, mean_squared_error  # Đánh giá mô hình
import tensorflow as tf  # Xây dựng mô hình học sâu
from tensorflow.keras.models import Sequential  # Tạo mô hình tuần tự
from tensorflow.keras.layers import LSTM, Dense, Dropout  # Thành phần mạng LSTM
import datetime  # Xử lý thời gian

# Bước 2: Tải và làm sạch dữ liệu
# Đọc dữ liệu từ file Excel chứa thông tin bán hàng và tồn kho
df = pd.read_excel('warehouse_sales_data_2000.xlsx')

# Kiểm tra cấu trúc và nội dung dữ liệu
print("Thông tin dữ liệu:")
print(df.info())  # Hiển thị kiểu dữ liệu và giá trị null
print("\n5 dòng đầu tiên:")
print(df.head())  # Xem trước dữ liệu

# Loại bỏ hàng có giá trị thiếu để đảm bảo dữ liệu sạch
df = df.dropna()

# Chuyển cột 'Date' sang định dạng datetime để xử lý thời gian
df['Date'] = pd.to_datetime(df['Date'])

# Loại bỏ giá trị ngoại lai để cải thiện chất lượng dữ liệu
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)  # Phân vị 25%
    Q3 = df[column].quantile(0.75)  # Phân vị 75%
    IQR = Q3 - Q1  # Khoảng phân vị
    lower_bound = Q1 - 1.5 * IQR  # Giới hạn dưới
    upper_bound = Q3 + 1.5 * IQR  # Giới hạn trên
    df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]  # Lọc dữ liệu
    return df

# Áp dụng loại bỏ ngoại lai cho cột 'Sales_Qty' và 'Stock_Level'
df = remove_outliers(df, 'Sales_Qty')
df = remove_outliers(df, 'Stock_Level')

# Bước 3: Tạo đặc trưng để cải thiện dự đoán
# Trích xuất các đặc trưng thời gian từ cột 'Date'
df['Year'] = df['Date'].dt.year  # Năm
df['Month'] = df['Date'].dt.month  # Tháng
df['Day'] = df['Date'].dt.day  # Ngày
df['DayOfWeek'] = df['Date'].dt.dayofweek  # Thứ trong tuần

# Chuyển cột 'Is_Promotion' thành số (0/1) để sử dụng trong mô hình
df['Is_Promotion'] = df['Is_Promotion'].astype(int)

# Mã hóa one-hot cho các cột danh mục để chuyển thành số
df = pd.get_dummies(df, columns=['Category', 'Season', 'Weekday'], drop_first=True)  # Bỏ cột đầu để tránh đa cộng tuyến

# Tạo đặc trưng trễ để nắm bắt xu hướng bán hàng
for lag in [1, 2, 3, 7]:
    df[f'Sales_Qty_Lag_{lag}'] = df['Sales_Qty'].shift(lag)  # Doanh số từ 1, 2, 3, 7 ngày trước

# Xóa hàng có giá trị NaN do tạo đặc trưng trễ
df = df.dropna()

# Tổng hợp dữ liệu theo sản phẩm và ngày để thống nhất bản ghi
df_agg = df.groupby(['Product_ID', 'Date']).agg({
    'Stock_Level': 'mean',  # Trung bình mức tồn kho
    'Sales_Qty': 'sum',  # Tổng doanh số
    'Unit_Price': 'mean',  # Trung bình giá đơn vị
    'Revenue': 'sum',  # Tổng doanh thu
    'Is_Promotion': 'max',  # Có khuyến mãi hay không
    'Year': 'first',  # Năm
    'Month': 'first',  # Tháng
    'Day': 'first',  # Ngày
    'DayOfWeek': 'first',  # Thứ
    'Sales_Qty_Lag_1': 'first',  # Doanh số trễ 1 ngày
    'Sales_Qty_Lag_2': 'first',  # Doanh số trễ 2 ngày
    'Sales_Qty_Lag_3': 'first',  # Doanh số trễ 3 ngày
    'Sales_Qty_Lag_7': 'first'  # Doanh số trễ 7 ngày
}).reset_index()

# Thêm cột one-hot vào dữ liệu tổng hợp
dummy_cols = [col for col in df.columns if col.startswith('Category_') or col.startswith('Season_') or col.startswith('Weekday_')]
for col in dummy_cols:
    df_agg[col] = df.groupby(['Product_ID', 'Date'])[col].first().values  # Lấy giá trị đầu tiên

# Bước 4: Chuẩn bị dữ liệu cho mô hình LSTM
# Xác định đặc trưng và mục tiêu
features = ['Sales_Qty', 'Unit_Price', 'Revenue', 'Is_Promotion', 'Year', 'Month', 'Day', 'DayOfWeek',
            'Sales_Qty_Lag_1', 'Sales_Qty_Lag_2', 'Sales_Qty_Lag_3', 'Sales_Qty_Lag_7'] + dummy_cols  # Đặc trưng đầu vào
target = 'Stock_Level'  # Mục tiêu dự đoán

# Chuẩn hóa dữ liệu để đảm bảo thang đo đồng nhất
scaler_features = MinMaxScaler()  # Chuẩn hóa đặc trưng
df_agg[features] = scaler_features.fit_transform(df_agg[features])
scaler_target = MinMaxScaler()  # Chuẩn hóa mục tiêu
df_agg[[target]] = scaler_target.fit_transform(df_agg[[target]])

# Tạo chuỗi thời gian cho mô hình LSTM
def create_sequences(df, seq_length, features, target):
    X, y = [], []
    data = df[features + [target]].values  # Lấy dữ liệu đặc trưng và mục tiêu
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length, :len(features)])  # Chuỗi đặc trưng 7 ngày
        y.append(data[i + seq_length, len(features)])  # Mức tồn kho ngày tiếp theo
    return np.array(X), np.array(y)

# Tạo chuỗi cho từng sản phẩm
seq_length = 7  # Độ dài chuỗi (7 ngày)
X, y = [], []
for product_id in df_agg['Product_ID'].unique():
    product_data = df_agg[df_agg['Product_ID'] == product_id]  # Lọc dữ liệu sản phẩm
    if len(product_data) > seq_length:
        X_product, y_product = create_sequences(product_data, seq_length, features, target)  # Tạo chuỗi
        X.append(X_product)
        y.append(y_product)

# Gộp chuỗi từ tất cả sản phẩm
X = np.concatenate(X, axis=0)  # Mảng đặc trưng
y = np.concatenate(y, axis=0)  # Mảng mục tiêu

# Chia dữ liệu thành huấn luyện và kiểm tra
train_size = int(0.8 * len(X))  # 80% huấn luyện, 20% kiểm tra
X_train, X_test = X[:train_size], X[train_size:]  # Chia đặc trưng
y_train, y_test = y[:train_size], y[train_size:]  # Chia mục tiêu

# Bước 5: Xây dựng và huấn luyện mô hình LSTM
# Tạo mô hình tuần tự với LSTM
model = Sequential([
    LSTM(50, activation='relu', input_shape=(seq_length, len(features)), return_sequences=True),  # Tầng LSTM 1
    Dropout(0.2),  # Giảm overfitting
    LSTM(50, activation='relu'),  # Tầng LSTM 2
    Dropout(0.2),  # Giảm overfitting
    Dense(1)  # Tầng đầu ra
])

# Biên dịch mô hình
model.compile(optimizer='adam', loss='mse')  # Tối ưu bằng Adam, mất mát là MSE

# Hiển thị cấu trúc mô hình
model.summary()

# Huấn luyện mô hình
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1, verbose=1)  # Huấn luyện 30 epoch

# Bước 6: Đánh giá mô hình
# Dự đoán trên tập kiểm tra
y_pred = model.predict(X_test)  # Dự đoán mức tồn kho

# Khôi phục thang đo gốc
y_test_orig = scaler_target.inverse_transform(y_test.reshape(-1, 1)).flatten()  # Giá trị thực
y_pred_orig = scaler_target.inverse_transform(y_pred).flatten()  # Giá trị dự đoán

# Tính toán chỉ số đánh giá
mae = mean_absolute_error(y_test_orig, y_pred_orig)  # Sai lệch tuyệt đối trung bình
rmse = np.sqrt(mean_squared_error(y_test_orig, y_pred_orig))  # Sai lệch bình phương trung bình

# Hiển thị kết quả
print(f"MAE: {mae:.2f}")  # Độ chính xác trung bình
print(f"RMSE: {rmse:.2f}")  # Độ lệch tổng thể

# Bước 7: Lưu kết quả dự đoán
# Tạo DataFrame chứa kết quả kiểm tra
test_indices = df_agg.index[train_size + seq_length:train_size + seq_length + len(y_test)]
df_test = df_agg.loc[test_indices].copy()
df_test['Stock_Level'] = scaler_target.inverse_transform(df_test[[target]]).flatten()  # Khôi phục thang gốc
df_test['Predicted_Stock_Level'] = y_pred_orig  # Thêm dự đoán

# Chọn cột cần lưu
result_df = df_test[['Product_ID', 'Date', 'Stock_Level', 'Predicted_Stock_Level']]  # Thông tin cần thiết

# Lưu vào file CSV
result_df.to_csv('predicted_inventory.csv', index=False)  # Lưu kết quả
print("Kết quả đã lưu vào 'predicted_inventory.csv'")

# Bước 8: Trực quan hóa kết quả
# Biểu đồ mất mát huấn luyện và xác thực
plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Mất mát huấn luyện')  # Mất mát trên tập huấn luyện
plt.plot(history.history['val_loss'], label='Mất mát xác thực')  # Mất mát trên tập xác thực
plt.title('Mất mát của Mô hình')  # Tiêu đề
plt.xlabel('Vòng lặp (Epoch)')  # Trục x
plt.ylabel('Mất mát (Loss)')  # Trục y
plt.legend()  # Chú thích
plt.show()

# Biểu đồ so sánh mức tồn kho thực tế và dự đoán
plt.figure(figsize=(15, 5))
plt.plot(y_test_orig[:100], label='Tồn kho thực tế', color='blue')  # Giá trị thực
plt.plot(y_pred_orig[:100], label='Tồn kho dự đoán', color='orange')  # Giá trị dự đoán
plt.title('So sánh Tồn kho Thực tế và Dự đoán')  # Tiêu đề
plt.xlabel('Thời gian')  # Trục x
plt.ylabel('Mức tồn kho')  # Trục y
plt.legend()  # Chú thích
plt.show()

# Bước 9: Phân tích xu hướng mùa
# Vẽ xu hướng tồn kho theo mùa cho từng sản phẩm
season_cols = [col for col in df_test.columns if col.startswith('Season_')]
for season in season_cols:
    season_name = season.replace('Season_', '')  # Tên mùa
    season_data = df_test[df_test[season] == 1]  # Lọc dữ liệu mùa
    unique_products = season_data['Product_ID'].unique()[:3]  # Chọn 3 sản phẩm
    for product_id in unique_products:
        product_data = season_data[season_data['Product_ID'] == product_id]  # Lọc sản phẩm
        product_data = product_data.sort_values('Date')  # Sắp xếp theo ngày
        plt.figure(figsize=(10, 5))
        plt.plot(product_data['Date'], product_data['Stock_Level'], label=f'Tồn kho thực tế ({season_name})', color='blue', alpha=0.7)
        plt.plot(product_data['Date'], product_data['Predicted_Stock_Level'], label=f'Tồn kho dự đoán ({season_name})', color='orange', alpha=0.7)
        plt.title(f'Xu hướng Tồn kho theo {season_name} - Sản phẩm {product_id}')  # Tiêu đề
        plt.xlabel('Ngày')  # Trục x
        plt.ylabel('Mức tồn kho')  # Trục y
        plt.legend()  # Chú thích
        plt.grid(True)  # Lưới
        plt.show()

# So sánh tác động của khuyến mãi
promo_data = df_test[df_test['Is_Promotion'] == 1]  # Ngày có khuyến mãi
non_promo_data = df_test[df_test['Is_Promotion'] == 0]  # Ngày không khuyến mãi
plt.figure(figsize=(10, 5))
plt.scatter(promo_data['Date'], promo_data['Predicted_Stock_Level'], label='Có khuyến mãi', color='red', alpha=0.5)
plt.scatter(non_promo_data['Date'], non_promo_data['Predicted_Stock_Level'], label='Không khuyến mãi', color='blue', alpha=0.5)
plt.title('Tồn kho Dự đoán: Có vs Không Khuyến mãi')  # Tiêu đề
plt.xlabel('Ngày')  # Trục x
plt.ylabel('Tồn kho Dự đoán')  # Trục y
plt.legend()  # Chú thích
plt.show()

# Bước 10: Lưu mô hình
# Lưu mô hình để sử dụng lại
model.save('du_doan_ton_kho_model.h5')
print("Mô hình đã lưu vào 'du_doan_ton_kho_model.h5'")

"""# Mục mới"""